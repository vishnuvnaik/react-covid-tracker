{"version":3,"sources":["util.js","Map.js","InfoBox.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["casesTypeColors","cases","hex","rgb","half_op","multiplier","recovered","deaths","prettyPrintStat","stat","concat","numeral","format","showDataOnMap","data","casesType","arguments","length","undefined","map","country","i","react_default","a","createElement","Circle","key","center","countryInfo","lat","long","color","fillColor","fillOpacity","radius","Math","sqrt","Popup","className","style","backgroundImage","flag","sortData","Object","toConsumableArray","sort","b","Map","_ref","countries","zoom","TileLayer","url","attribution","InfoBox","title","active","isRed","total","props","objectWithoutProperties","Card","onClick","CardContent","Typography","Table","_ref2","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","_ref$casesType","_useState","useState","_useState2","slicedToArray","setData","useEffect","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","fetch","then","response","json","stop","apply","this","fetchData","es","datasets","backgroundColor","borderColor","App","setInputCountry","_useState3","_useState4","setCountryInfo","_useState5","_useState6","setCountries","_useState7","_useState8","tableData","setTableData","_useState9","_useState10","mapCountries","setMapCountries","_useState11","lng","_useState12","mapCenter","setMapCenter","_useState13","_useState14","mapZoom","setMapZoom","_useState15","_useState16","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","_callee2","e","countryCode","_context2","target","_x","FormControl","Select","variant","onChange","MenuItem","src_InfoBox","todayCases","todayRecovered","todayDeaths","src_Map_0","src_Table","src_LineGraph","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9a774985.chunk.js","sourcesContent":["import numeral from \"numeral\";\r\nimport React from \"react\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 500,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\nexport const showDataOnMap = (data, casesType = \"cases\") => {\r\n  return data.map((country, i) => (\r\n    <Circle\r\n      key={i}\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-cases\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-death\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport { showDataOnMap } from \"./util\";\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport \"./InfoBox.css\";\r\nfunction InfoBox({ title, cases, active, isRed, total, ...props }) {\r\n  return (\r\n    <Card\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n      onClick={props.onClick}\r\n    >\r\n      <CardContent>\r\n        <Typography color=\"textSecondary\" className=\"infoBox__title\">\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n        <Typography color=\"textSecondary\" className=\"infoBox__total\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr>\r\n          <td>{country}</td>\r\n          <td>\r\n            <strong>{cases}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\nfunction LineGraph({ casesType = \"cases\" }) {\r\n  const [data, setData] = useState({});\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className=\"app__graph\">\r\n      {data.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from \"react\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport \"./App.css\";\nimport Map from \"./Map\";\nimport InfoBox from \"./InfoBox\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport \"leaflet/dist/leaflet.css\";\nimport LineGraph from \"./LineGraph\";\nimport numeral from \"numeral\";\nfunction App() {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setTableData(sortedData);\n          setCountries(countries);\n          setMapCountries(data);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        setMapZoom(4);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      });\n  };\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>Covid19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live cases by country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\"> Worldwide New {casesType} </h3>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}